// This file is part of coursework 2 for COMP1212
// which follows the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// Written by Sam Wilson

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM=0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time unit. If reset=1 then the
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        Not(x=instruction[15], out=Ainstruction);
        Not(x=Ainstruction, out=Cinstruction);
        
        And(x=Cinstruction, y=instruction[5], out=ALUtoA);    
        Mux16(x=instruction, y=ALUout, sel=ALUtoA, out=Aregin);
        
        Or(x=Ainstruction, y=ALUtoA, out=loadA);   
        ARegister(in=Aregin, load=loadA, out=Aout);
        
        Mux16(x=Aout, y=inM, sel=instruction[12], out=AMout);   

        And(x=Cinstruction, y=instruction[4], out=loadD);
        DRegister(in=ALUout, load=loadD, out=Dout);    
        
        ALU(x=Dout, y=AMout, zx=instruction[11], nx=instruction[10], 
            zy=instruction[9], ny=instruction[8], f=instruction[7],
            no=instruction[6], out=ALUout, zr=ZRout, ng=NGout); 
            
        // Set outputs for writing memory
        Or16(x=false, y=Aout, out[0..14]=addressM);
        Or16(x=false, y=ALUout, out=outM);
        And(x=Cinstruction, y=instruction[3], out=writeM);
        
        // calc PCload & PCinc - whether to load PC with A reg
        And(x=ZRout, y=instruction[1], out=jeq);   
        And(x=NGout, y=instruction[2], out=jlt);   
        Or(x=ZRout, y=NGout, out=zeroOrNeg);
        Not(x=zeroOrNeg, out=positive);            
        And(x=positive, y=instruction[0], out=jgt); 
        Or(x=jeq, y=jlt, out=jle);
        Or(x=jle, y=jgt, out=jumpToA);              
        And(x=Cinstruction, y=jumpToA, out=PCload); 
        Not(x=PCload, out=PCinc);                 
        PC(x=Aout, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);

}
